
'use client';

import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { Loader2, FileUp } from 'lucide-react';
import { extractDocumentMetadata } from '@/ai/flows/extract-document-metadata';
import { enhanceSearchWithKeywords } from '@/ai/flows/enhance-search-with-keywords';
import { extractTextFromImage } from '@/ai/flows/extract-text-from-image';
import { auth, db, storage } from '@/lib/firebase';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { v4 as uuidv4 } from 'uuid';
import { doc, addDoc, collection, serverTimestamp, updateDoc } from 'firebase/firestore';


const uploadSchema = z.object({
  files: z
    .any()
    .refine((files) => files?.length > 0, 'At least one file is required.')
    .refine((files) => Array.from(files).every((file: any) => file.size <= 5000000), `Max file size is 5MB per file.`)
    .refine(
      (files) => Array.from(files).every((file: any) => ["image/jpeg", "image/png", "application/pdf"].includes(file?.type)),
      "Only .jpg, .png and .pdf files are accepted."
    ),
});

type UploadDialogProps = {
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
};

// Helper function for retrying promises with exponential backoff
const retryWithBackoff = async <T,>(
  fn: () => Promise<T>,
  retries = 3,
  delay = 1000,
  backoff = 2
): Promise<T> => {
  try {
    return await fn();
  } catch (error: any) {
    if (retries > 0 && error.message?.includes('503')) {
      await new Promise(res => setTimeout(res, delay));
      return retryWithBackoff(fn, retries - 1, delay * backoff, backoff);
    } else {
      throw error;
    }
  }
};


export function UploadDialog({ isOpen, setIsOpen }: UploadDialogProps) {
  const [isProcessing, setIsProcessing] = useState(false);
  const [fileNames, setFileNames] = useState<string[]>([]);
  const { toast } = useToast();
  const form = useForm<z.infer<typeof uploadSchema>>({
    resolver: zodResolver(uploadSchema),
    defaultValues: {
      files: undefined,
    }
  });

  const processFile = async (file: File, user: any) => {
      const uniqueFileName = `${uuidv4()}-${file.name}`;
      const storagePath = `documents/${user.uid}/${uniqueFileName}`;
      const storageRef = ref(storage, storagePath);

      const readerForMetadata = new FileReader();
      readerForMetadata.readAsDataURL(file);
      const dataUrlForMetadata = await new Promise<string>((resolve, reject) => {
        readerForMetadata.onload = e => resolve(e.target?.result as string);
        readerForMetadata.onerror = e => reject(e);
      });
      
      const docRef = await addDoc(collection(db, 'documents'), {
        userId: user.uid,
        fileName: file.name,
        storagePath: storagePath,
        fileUrl: '', // Will be updated after upload
        thumbnailUrl: null, // Thumbnails are not generated by default in Firebase Storage
        mimeType: file.type,
        uploadedAt: serverTimestamp(),
        owner: 'Processing...',
        type: 'Processing...',
        keywords: [],
        summary: 'Processing...',
        textContent: '',
        expiry: null,
        company: null,
        country: null,
        isProcessing: true,
      });

      toast({ title: `Uploading ${file.name}`, description: 'Please wait while we upload and process your file.' });
      
      // Upload file to Firebase Storage
      const uploadTask = await uploadBytes(storageRef, file);
      const fileUrl = await getDownloadURL(uploadTask.ref);

      await updateDoc(doc(db, 'documents', docRef.id), { fileUrl });
      
      try {
        const metadata = await retryWithBackoff(() => extractDocumentMetadata({ documentDataUrl: dataUrlForMetadata }));
        const { text } = await retryWithBackoff(() => extractTextFromImage({ documentDataUrl: dataUrlForMetadata }));
        const { keywords } = await retryWithBackoff(() => enhanceSearchWithKeywords({ documentText: text }));
        
        await updateDoc(doc(db, 'documents', docRef.id), {
          ...metadata,
          keywords,
          textContent: text,
          isProcessing: false,
        });

        toast({ title: `Processing Complete for ${file.name}!`, description: `Successfully analyzed and saved your ${metadata.documentType}.` });
      } catch (aiError) {
        console.error(`Failed to process ${file.name} with AI:`, aiError);
        await updateDoc(doc(db, 'documents', docRef.id), { 
            owner: file.name, 
            type: 'Processing Failed', 
            summary: 'Could not analyze this document.', 
            isProcessing: false 
        });
        toast({ variant: 'destructive', title: 'AI Processing Failed', description: `Could not extract metadata from ${file.name}.` });
      }
  };

  const onSubmit = async (values: z.infer<typeof uploadSchema>) => {
    setIsProcessing(true);
    const user = auth.currentUser;

    if (!user) {
      toast({ variant: 'destructive', title: 'Not Authenticated', description: 'You must be logged in to upload documents.' });
      setIsProcessing(false);
      return;
    }

    const files = Array.from(values.files) as File[];

    try {
      setIsOpen(false);
      form.reset();
      setFileNames([]);

      toast({
          title: `Starting upload of ${files.length} document(s)...`,
          description: 'You can continue to use the app while processing happens in the background.',
      });

      // Process all files
      await Promise.all(files.map(file => processFile(file, user)));

    } catch (error: any) {
      console.error('Failed to upload documents:', error);
      toast({ variant: 'destructive', title: 'Upload Failed', description: error.message || 'An unexpected error occurred.' });
    } finally {
      setIsProcessing(false);
    }
  };

  const fileRef = form.register('files');

  return (
    <Dialog open={isOpen} onOpenChange={(open) => {
      if (!isProcessing) {
        setIsOpen(open);
        if (!open) {
          form.reset();
          setFileNames([]);
        }
      }
    }}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Upload Document(s)</DialogTitle>
          <DialogDescription>
            Select one or more document files to upload. The system will automatically organize them for you.
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <FormField
              control={form.control}
              name="files"
              render={({ field }) => (
                <FormItem>
                  <FormLabel htmlFor="file-upload" className="sr-only">Document File</FormLabel>
                  <FormControl>
                    <div className="flex items-center justify-center w-full">
                        <label htmlFor="file-upload" className="flex flex-col items-center justify-center w-full h-48 border-2 border-dashed rounded-lg cursor-pointer bg-card hover:bg-muted/50">
                            <div className="flex flex-col items-center justify-center pt-5 pb-6 text-center">
                                <FileUp className="w-10 h-10 mb-3 text-muted-foreground" />
                                {fileNames.length > 0 ? (
                                    <div className="text-sm font-semibold text-primary px-2">
                                        {fileNames.length === 1 ? fileNames[0] : `${fileNames.length} files selected`}
                                        {fileNames.length > 1 && 
                                            <p className="text-xs text-muted-foreground font-normal mt-1 truncate max-w-xs">{fileNames.join(', ')}</p>
                                        }
                                    </div>
                                ) : (
                                  <>
                                    <p className="mb-2 text-sm text-muted-foreground"><span className="font-semibold">Click to upload</span> or drag and drop</p>
                                    <p className="text-xs text-muted-foreground">PDF, PNG, JPG, etc. (multi-select enabled)</p>
                                  </>
                                )}
                            </div>
                            <Input id="file-upload" type="file" multiple className="hidden" {...fileRef} onChange={(e) => {
                                field.onChange(e.target.files);
                                if (e.target.files && e.target.files.length > 0) {
                                    setFileNames(Array.from(e.target.files).map(f => f.name));
                                }
                            }} />
                        </label>
                    </div> 
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <DialogFooter>
              <DialogClose asChild>
                <Button type="button" variant="secondary" disabled={isProcessing}>
                  Cancel
                </Button>
              </DialogClose>
              <Button type="submit" disabled={isProcessing || fileNames.length === 0} className="bg-accent hover:bg-accent/90">
                {isProcessing ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Uploading...
                  </>
                ) : `Upload ${fileNames.length > 0 ? fileNames.length : ''} file(s)`}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
